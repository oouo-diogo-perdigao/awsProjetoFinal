/*
 * API Pagamentos
 * Este é um exemplo de serviço de validação de pagamentos
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiPagamentos);
  }
}(this, function(expect, ApiPagamentos) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Buy', function() {
      beforeEach(function() {
        instance = new ApiPagamentos.Buy();
      });

      it('should create an instance of Buy', function() {
        // TODO: update the code to test Buy
        expect(instance).to.be.a(ApiPagamentos.Buy);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property moeda (base name: "moeda")', function() {
        // TODO: update the code to test the property moeda
        expect(instance).to.have.property('moeda');
        // expect(instance.moeda).to.be(expectedValueLiteral);
      });

      it('should have the property fret (base name: "fret")', function() {
        // TODO: update the code to test the property fret
        expect(instance).to.have.property('fret');
        // expect(instance.fret).to.be(expectedValueLiteral);
      });

      it('should have the property info (base name: "info")', function() {
        // TODO: update the code to test the property info
        expect(instance).to.have.property('info');
        // expect(instance.info).to.be(expectedValueLiteral);
      });

      it('should have the property installments (base name: "installments")', function() {
        // TODO: update the code to test the property installments
        expect(instance).to.have.property('installments');
        // expect(instance.installments).to.be(expectedValueLiteral);
      });

      it('should have the property cc (base name: "cc")', function() {
        // TODO: update the code to test the property cc
        expect(instance).to.have.property('cc');
        // expect(instance.cc).to.be(expectedValueLiteral);
      });

      it('should have the property method (base name: "method")', function() {
        // TODO: update the code to test the property method
        expect(instance).to.have.property('method');
        // expect(instance.method).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

    });
  });

}));
