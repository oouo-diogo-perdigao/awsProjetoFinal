/*
 * API Pagamentos
 * Este é um exemplo de serviço de validação de pagamentos
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Buy'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Buy'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiPagamentos) {
      root.ApiPagamentos = {};
    }
    root.ApiPagamentos.PaymentApi = factory(root.ApiPagamentos.ApiClient, root.ApiPagamentos.Buy);
  }
}(this, function(ApiClient, Buy) {
  'use strict';

  /**
   * Payment service.
   * @module api/PaymentApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PaymentApi. 
   * @alias module:api/PaymentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getBillet operation.
     * @callback module:api/PaymentApi~getBilletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gera boleto
     * Mostra o boleto para pagamento
     * @param {Number} id Identificador da compra
     * @param {module:api/PaymentApi~getBilletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getBillet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBillet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey_auth'];
      var contentTypes = [];
      var accepts = ['text/html; charset=utf-8'];
      var returnType = null;

      return this.apiClient.callApi(
        '/billet/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPagamento operation.
     * @callback module:api/PaymentApi~getPagamentoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retorna o status do pagamento
     * Identifica o pagamento pelo seu ID
     * @param {String} authorization Token de acesso obtido no endpoint de autenticação
     * @param {Number} id Identificador da compra
     * @param {module:api/PaymentApi~getPagamentoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getPagamento = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPagamento");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPagamento");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['apikey_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buy/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setPagamento operation.
     * @callback module:api/PaymentApi~setPagamentoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registrar Pedido
     * Registra pedido de pagamento iniciando processo de compra
     * @param {String} authorization Token de acesso obtido no endpoint de autenticação
     * @param {Object} opts Optional parameters
     * @param {module:model/Buy} opts.buy 
     * @param {module:api/PaymentApi~setPagamentoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.setPagamento = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['buy'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling setPagamento");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['apikey_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/buy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
